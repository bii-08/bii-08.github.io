<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Tam Luu</title><description>iOS Developer</description><link>https://bii-08.github.io</link><language>en</language><lastBuildDate>Wed, 31 Jul 2024 12:00:00 +1000</lastBuildDate><pubDate>Wed, 31 Jul 2024 12:00:00 +1000</pubDate><ttl>250</ttl><atom:link href="https://bii-08.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://bii-08.github.io/posts/using%20generics%20to%20decode%20JSON</guid><title>Using Generics to Decode JSON in Swift</title><description>Generics enable you to write flexible and reusable functions and types, helping you avoid duplication and making your code more readable.</description><link>https://bii-08.github.io/posts/using%20generics%20to%20decode%20JSON</link><pubDate>Tue, 30 Jul 2024 14:47:00 +1000</pubDate><content:encoded><![CDATA[<p>Generics are one of the most powerful features of Swift, and much of the Swift standard library is built with generic code. By using generics, you can write flexible and reusable functions and types that help you avoid duplication and make your code more readable.</p><h2>Generic Functions</h2><p>Generic functions can work with any type. Here is a non-generic function that adds two integer values together and then returns the result:</p><pre><code><span class="keyword">func</span> add(<span class="keyword">_</span> firstValue: <span class="type">Int</span>, <span class="keyword">_</span> secondValue: <span class="type">Int</span>) -&gt; <span class="type">Int</span> {
     firstValue + secondValue
}
</code></pre><p>But what if we want to have a function that performs this kind of calculation on any type of values, rather than just integers? Here is a generic function:</p><pre><code><span class="keyword">func</span> add&lt;T: <span class="type">Numeric</span>&gt;(<span class="keyword">_</span> firstValue: <span class="type">T</span>, <span class="keyword">_</span> secondValue: <span class="type">T</span>) -&gt; <span class="type">T</span> {
     firstValue + secondValue
}
<span class="comment">// &lt;T&gt;: is a placeholder type inside angle brackets.
// Numeric: a type constraint that requires T to conform to the Numeric protocol.</span>
</code></pre><p>In the two examples below, T is inferred to be Int and Double, respectively:</p><pre><code><span class="keyword">let</span> intCalculation = <span class="call">add</span>(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// 5</span>
<span class="keyword">let</span> doubleCalculation = <span class="call">add</span>(<span class="number">5.2</span>, <span class="number">3.6</span>) <span class="comment">// 8.8</span>
</code></pre><h2>Using Generic functions to Decode JSON</h2><p>Let's say we have two different JSON files. One file contains chemistry class information, and the other file contains details of a student in that class.</p><pre><code><span class="comment">// Chemistry-Class-info.json</span>
{
    <span class="string">"class"</span>: <span class="string">"chemistry"</span>,
    <span class="string">"teacher"</span>: <span class="string">"Heisenberg"</span>,
    <span class="string">"students"</span>: [
       {
           <span class="string">"id"</span>: <span class="number">1</span>,
           <span class="string">"first_name"</span>: <span class="string">"Jesse"</span>,
           <span class="string">"last_name"</span>: <span class="string">"Pinkman"</span>
        },
        {
           <span class="string">"id"</span>: <span class="number">2</span>,
           <span class="string">"first_name"</span>: <span class="string">"Saul"</span>,
           <span class="string">"last_name"</span>: <span class="string">"Goodman"</span>
        },
        {
            <span class="string">"id"</span>: <span class="number">3</span>,
           <span class="string">"first_name"</span>: <span class="string">"Mike"</span>,
           <span class="string">"last_name"</span>: <span class="string">"Ehrmantraut"</span>
        }
    ],
    <span class="string">"place"</span>: <span class="string">"RV"</span>
}

<span class="comment">// Student-details.json</span>
{
   <span class="string">"id"</span>: <span class="number">1</span>,
   <span class="string">"first_name"</span>: <span class="string">"Jesse"</span>,
   <span class="string">"last_name"</span>: <span class="string">"Pinkman"</span>
}
</code></pre><p>To parse the JSON data, we need to define our structs, which are referred to as models.</p><pre><code><span class="comment">// MARK: - Class</span>
<span class="keyword">struct</span> Class: <span class="type">Codable</span> {
    <span class="keyword">let</span> className: <span class="type">String</span> 
    <span class="keyword">let</span> teacher: <span class="type">String</span>
    <span class="keyword">let</span> students: [<span class="type">Student</span>]
    <span class="keyword">let</span> place: <span class="type">String</span>
}

<span class="comment">// MARK: - Student</span>
<span class="keyword">struct</span> Student: <span class="type">Codable</span> {
    <span class="keyword">let</span> id: <span class="type">Int</span>
    <span class="keyword">let</span> firstName: <span class="type">String</span>
    <span class="keyword">let</span> lastName: <span class="type">String</span>
}
</code></pre><p>Our structs both conform to <code>Codable</code>, which is a protocol that allow us to decode JSON into our <code>Class</code>, and <code>Student</code> model types. Here's how you can write a generic function to handle this:</p><pre><code><span class="keyword">struct</span> DataManager {

   <span class="keyword">static func</span> decode&lt;T: <span class="type">Codable</span>&gt;(file: <span class="type">String</span>, type: <span class="type">T</span>.<span class="type">Type</span>) -&gt; <span class="type">T</span>? {
      <span class="keyword">guard let</span> path = <span class="type">Bundle</span>.<span class="property">main</span>.<span class="call">path</span>(forResource: file, type: <span class="string">"json"</span>) <span class="keyword">else</span> {
         <span class="call">fatalError</span>(<span class="string">"Failed to find this</span> \(file)<span class="string">."</span>)
     }
     <span class="keyword">guard let</span> data = <span class="type">FileManager</span>.<span class="property">default</span>.<span class="call">contents</span>(atPath: path) <span class="keyword">else</span> {
        <span class="call">fatalError</span>(<span class="string">"Failed to load this</span> \(file)<span class="string">."</span>)
     }
    
     <span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()
     decoder.<span class="property">keyDecodingStrategy</span> = .<span class="dotAccess">convertFromSnakeCase</span>
     <span class="keyword">do</span> {
        <span class="keyword">return try</span> decoder.<span class="call">decode</span>(<span class="type">T</span>.<span class="keyword">self</span>, from: data)
     } <span class="keyword">catch</span> {
        <span class="call">print</span>(error)
        <span class="keyword">return nil</span>
     }
   }
}
</code></pre><p>Now we can use this function to decode these JSON files to the type that we pass in (in this case, <code>Class</code> and <code>Student</code>). Note: Make sure you don't misspell the file names.</p><pre><code><span class="keyword">var</span> chemistryClass: <span class="type">Class</span>?
<span class="keyword">var</span> student: <span class="type">Student</span>?

chemistryClass = <span class="keyword">try</span>? <span class="type">DataManager</span>.<span class="call">decode</span>(file: <span class="string">"Chemistry-Class-info"</span>, type: <span class="type">Class</span>.<span class="keyword">self</span>)
<span class="keyword">if let</span> chemistryClass = chemistryClass {
   <span class="call">print</span>(<span class="string">"Teacher:</span> \(chemistryClass.<span class="property">teacher</span>)<span class="string">"</span>) <span class="comment">// Teacher: Heisenberg</span>
   <span class="call">print</span>(<span class="string">"Place:</span> \(chemistryClass.<span class="property">place</span>)<span class="string">"</span>)     <span class="comment">// Place: RV</span>
}

student = <span class="keyword">try</span>? <span class="type">DataManager</span>.<span class="call">decode</span>(file: <span class="string">"Student-details"</span>, type: <span class="type">Student</span>.<span class="keyword">self</span>)
<span class="keyword">if let</span> student = student {
   <span class="call">print</span>(<span class="string">"Student:</span> \(student.<span class="property">firstName</span>)<span class="string">"</span>)  <span class="comment">// Student: Jesse</span>
}
</code></pre><p>That's it. Now you know how to decode JSON using generic in Swift. This approach not only makes your code more reusable and easier to maintain but also leverages the power of Swift's type system to ensure safety and clarity.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://bii-08.github.io/posts/first-post</guid><title>How to call APIs using async/await in SwiftUI</title><description>In this article, we explore async/await in Swift 5.5, showing how it simplifies asynchronous code. Through a simple example of fetching data from a URL in a SwiftUI view, you'll see how modern Swift concurrency makes your code more readable, robust, and maintainable. Whether you're a seasoned developer or new to Swift, this guide will help you effectively use async/await in your SwiftUI projects.</description><link>https://bii-08.github.io/posts/first-post</link><pubDate>Sun, 30 Jun 2024 14:47:00 +1000</pubDate><content:encoded><![CDATA[<h2><code>Async/await</code> in Swift</h2><p><code>Async/await</code> is a modern Swift feature introduced in Swift 5.5 (WWDC 2021) that handles asynchronous operations more cleanly. By marking your function as <span style="color:violet">async</span> and using the <span style="color:violet">await</span> keyword when calling other asynchronous functions, you can streamline your asynchronous code.</p><h2>Fetching Data Asynchronously in SwiftUI</h2><p>Let's say you want to fetch recipe data from a URL whenever the view appears. Here’s how you can achieve that using <code>async/await</code>.</p><h3><strong><em>Step 1: Define your model</em></strong></h3><p>First, define a model to represent the recipe data.</p><pre><code><span class="comment">// Recipe model</span>
<span class="keyword">struct</span> Recipe: <span class="type">Codable</span> {
   <span class="keyword">var</span> name: <span class="type">String</span>
   <span class="keyword">var</span> ingredients: [<span class="type">String</span>]
   <span class="keyword">var</span> instruction: <span class="type">String</span>
}
</code></pre><h3><strong><em>Step 2: Create a Recipe fetching function</em></strong></h3><p>Next, define an asynchronous function to fetch the recipe from a URL.</p><pre><code><span class="comment">// Asynchronous function to fetch data</span>
<span class="keyword">func</span> fetchRecipe() <span class="keyword">async throws</span> -&gt; <span class="type">Recipe</span> {
   <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://recipe.com/recipes"</span>)!
   <span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: url)
   <span class="keyword">let</span> (data, <span class="keyword">_</span>) = <span class="keyword">try await</span> <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">data</span>(for: request)
   <span class="keyword">let</span> recipe = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Recipe</span>.<span class="keyword">self</span>, from: data)
   <span class="keyword">return</span> recipe
}
</code></pre><h3><strong><em>Step 3: Execute the asynchronous function</em></strong></h3><p>To execute an asynchronous function in SwiftUI, you need to call the function from a context that supports asynchronous execution, such as within the <code>onAppear</code> modifier using <code>Task</code>. This creates an asynchronous context to call the await function.</p><pre><code><span class="comment">// SwiftUI View</span>
<span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> RecipeView: <span class="type">View</span> {
    <span class="keyword">@State private var</span> recipe: <span class="type">Recipe</span>?
    <span class="keyword">@State private var</span> isLoading = <span class="keyword">false
    
    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ScrollView</span> {
            <span class="keyword">if</span> isLoading {
                <span class="type">ProgressView</span>()
            } <span class="keyword">else</span> {
                <span class="keyword">if let</span> recipe = recipe {
                    <span class="type">Text</span>(recipe.<span class="property">name</span>)
                    <span class="type">ForEach</span>(recipe.<span class="property">ingredients</span>.<span class="property">indices</span>, id: \.<span class="keyword">self</span>) { index <span class="keyword">in</span>
                        <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>, spacing: <span class="number">8</span>) {
                            <span class="type">Text</span>(recipe.<span class="property">ingredients</span>[index])
                        }
                    }
                    <span class="type">Text</span>(recipe.<span class="property">instruction</span>)
                } <span class="keyword">else</span> {
                    <span class="type">Text</span>(<span class="string">"No recipe loaded"</span>)
                }
            }
        }
        .<span class="call">onAppear</span> {
            <span class="type">Task</span> {
                isLoading = <span class="keyword">true
                do</span> {
                    recipe = <span class="keyword">try await</span> <span class="call">fetchRecipe</span>()
                } <span class="keyword">catch</span> {
                    <span class="call">print</span>(<span class="string">"Error fetching recipe:</span> \(error)<span class="string">"</span>)
                }
                isLoading = <span class="keyword">false</span>
            }
        }
    }
}
</code></pre><h2>Explanation</h2><ul><li><code>Async/await</code> in Swift: The <code>async</code> keyword marks a function as asynchronous, while the <code>await</code> keyword is used to call asynchronous functions. This makes the code easier to read and maintain compared to traditional completion handler-based asynchronous code. <br /></li><li>SwiftUI and Asynchronous Tasks: In SwiftUI, you can use the <code>Task</code> initializer within the <code>onAppear</code> modifier to create an asynchronous context. This allows you to call <code>await</code> functions safely when the view appears. <br /></li><li>Error Handling: Using <code>do-catch</code> blocks within the <code>Task</code> helps manage any errors that might occur during the data fetching process. <br /></li></ul><p>This example demonstrates how <code>async/await</code> in Swift can make asynchronous code more readable and intuitive, especially in the context of SwiftUI. <br /> By using modern Swift concurrency, developers can write code that is more robust and maintainable, simplifying complex tasks like networking and making them more straightforward and enjoyable to implement.</p>]]></content:encoded></item></channel></rss>